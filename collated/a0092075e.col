//@author: a0092075e



	/**
	 * origin: DaOrganiser\Facade.cpp
	 */

bool Facade::executeCommand() {
	Interface* guiLogicInterface = (Interface*) guiInterface;
	bool checkFlag = false;
	int counter = 0;
	if(_userCommand == "-quit" || _userCommand == "-Quit") 
		return true;
	else
	{
		for(int i=0;i<commandInput.size();i++)
        {
            if(commandInput[i]=="-add"||commandInput[i]=="-update"||commandInput[i]=="-delete"||commandInput[i]=="-read"||commandInput[i]=="-undo"||commandInput[i]=="-redo"||commandInput[i]=="-search"||commandInput[i]=="-all")
                counter++;
        }
 
        if(counter == 1)
        {
			for(int i=0;i<commandInput.size();i++)
			{
				if(commandInput[i]=="-add")
				{
					bool value = p.createTask(commandInput,taskStorage);
					if(value)
						guiLogicInterface->toDisplay("Task added successfully");
					else 
						guiLogicInterface->toDisplay("Error found while adding task");
					checkFlag=true;
					p.reupdateStatus(taskStorage);
					guiLogicInterface->updateGuiList();
				}
				else if(commandInput[i]=="-update")
				{
					try {
						bool value = p.updateTask(commandInput,taskStorage);
						if(value)
							guiLogicInterface->toDisplay("Task updated successfully");
						else
							guiLogicInterface->toDisplay("Error found while updating the task");
					}
					catch(const char* except)
					{
						guiLogicInterface->toDisplay(except);
					}

					checkFlag=true;
					p.reupdateStatus(taskStorage);
					guiLogicInterface->updateGuiList();
				}
				else if(commandInput[i]=="-delete")
				{
					try
					{
						if (checkDeleteInput()) {
							bool value = p.deleteTask(commandInput,taskStorage);
							if(value)
								guiLogicInterface->toDisplay("Task deleted successfully");
							else
								guiLogicInterface->toDisplay("Error found while deleting the task");
						}
					}
					catch(const char* except)
					{
						guiLogicInterface->toDisplay(except);
					}
					checkFlag=true;
					p.reupdateStatus(taskStorage);
					guiLogicInterface->updateGuiList();
				}
				else if (commandInput[i]=="-read")
				{
					p.readTask(taskStorage);
					checkFlag=true;
				}
				else if (commandInput[i]=="-undo")
				{
					try
					{
						p.undoTask(taskStorage);
					}
					catch(const char* except)
					{
						guiLogicInterface->toDisplay(except);
					}
					checkFlag=true;
					p.reupdateStatus(taskStorage);
					guiLogicInterface->updateGuiList();
				}
				else if (commandInput[i]=="-redo")
				{
					try
					{
						p.redoTask(taskStorage);
					}
					catch(const char* except)
					{
						guiLogicInterface->toDisplay(except);
					}
					checkFlag=true;
					p.reupdateStatus(taskStorage);
					guiLogicInterface->updateGuiList();
				}
				else if (commandInput[i]=="-search")
				{
					try
					{
						if (checkSearchKey()) {
							p.searchkey(taskStorage,keySearch,searchKey);
						}
					}
					catch(const char* except)
					{
						guiLogicInterface->toDisplay(except);
					}
					checkFlag=true;
					p.reupdateStatus(taskStorage);
					guiLogicInterface->displayGuiSearchResults(keySearch);
				}
				else if (commandInput[i]=="-all")
				{
					checkFlag=true;
					p.reupdateStatus(taskStorage);
					guiLogicInterface->toDisplay("Displaying all entries");
					guiLogicInterface->updateGuiList();
				}
			}
		}
		else
			checkFlag = false;
	}
	commandInput.clear();
	keySearch.clear();
	if(checkFlag==false)
	{
		guiLogicInterface->toDisplay("Invalid command entered");
	}
	else
	{	
		saveFile->writeAllToFile(taskStorage);
	}
	return false;
}

	// End of segment: DaOrganiser\Facade.cpp





	/**
	 * origin: DaOrganiser\Parser.cpp
	 */

Parser::Parser() {
}

Parser::~Parser() {
}

vector<string> Parser::parseString(string userCommand) {
	string singleWord;
	istringstream toSplitString(userCommand);

	do
	{
		toSplitString>>singleWord;
		splitString.push_back(singleWord);
	}while(toSplitString);

	splitString.pop_back();
	return splitString;
}
	// End of segment: DaOrganiser\Parser.cpp





	/**
	 * origin: DaOrganiser\task.cpp
	 */

Task::Task()
{
	status = TASK_STATUS_NOTDONE;
	kind = TASK_KIND_FLOATING;
	details = "";

	startDate.day = startDate.month = startDate.year = 0;
	endDate.day = endDate.month = endDate.year = 0;
	startTime.hr = startTime.min = 0;
	endTime.hr = endTime.min = 0;
}

string Task::getIdAsString()
{
	return std::to_string(taskID);
}

// Returns startdate as dd/mm/yy
string Task::getStartDateAsString()
{
	string startDateAsString;

	if(startDate.day<=9)
	{
		startDateAsString += '0';
	}
	startDateAsString += std::to_string(startDate.day);
	startDateAsString += "/";

	if(startDate.month<=9)
	{
		startDateAsString += '0';
	}
	startDateAsString += std::to_string(startDate.month);
	startDateAsString += "/";

	if(startDate.year<=9)
	{
		startDateAsString += '0';
	}
	startDateAsString += std::to_string(startDate.year);

	return startDateAsString;
}

// Returns starttime as hh:mm
string Task::getStartTimeAsString()
{
	string startTimeAsString;

	if(startTime.hr<=9)
	{
		startTimeAsString += '0';
	}
	startTimeAsString += std::to_string(startTime.hr);
	startTimeAsString += ":";

	if(startTime.min<=9)
	{
		startTimeAsString += '0';
	}
	startTimeAsString += std::to_string(startTime.min);

	return startTimeAsString;
}

// Returns enddate as dd/mm/yy
string Task::getEndDateAsString()
{
	string endDateAsString;

	if(endDate.day<=9)
	{
		endDateAsString += '0';
	}
	endDateAsString += std::to_string(endDate.day);
	endDateAsString += "/";

	if(endDate.month<=9)
	{
		endDateAsString += '0';
	}
	endDateAsString += std::to_string(endDate.month);
	endDateAsString += "/";

	if(endDate.year<=9)
	{
		endDateAsString += '0';
	}
	endDateAsString += std::to_string(endDate.year);

	return endDateAsString;
}

// Returns endtime as hh:mm
string Task::getEndTimeAsString()
{
	string endTimeAsString;

	if(endTime.hr<=9)
	{
		endTimeAsString += '0';
	}
	endTimeAsString += std::to_string(endTime.hr);
	endTimeAsString += ":";

	if(endTime.min<=9)
	{
		endTimeAsString += '0';
	}
	endTimeAsString += std::to_string(endTime.min);

	return endTimeAsString;
}

// Returns startdatetime as dd/mm/yy hh:mm
string Task::getStartDateTimeAsString()
{	
	return getStartDateAsString() + " " + getStartTimeAsString();
}

// Returns enddatetime as dd/mm/yy hh:mm
string Task::getEndDateTimeAsString()
{
	return getEndDateAsString() + " " + getEndTimeAsString();
}

string Task::getDetailsAsString()
{
	return details;
}

string Task::getStatusAsString()
{
	string statusAsString;
	switch(status)
	{
	case TASK_STATUS_NOTDONE: statusAsString = "Not done"; break;
	case TASK_STATUS_DONE: statusAsString = "Done"; break;
	case TASK_STATUS_APPROACHING: statusAsString = "Approaching deadline"; break;
	case TASK_STATUS_MISSED: statusAsString = "Missed deadline"; break;
	}
	return statusAsString;
}

string Task::getKindAsString()
{
	string kindAsString;
	switch(kind)
	{
	case TASK_KIND_DEADLINE: kindAsString = "Deadline Task"; break;
	case TASK_KIND_FLOATING: kindAsString = "Floating Task"; break;
	case TASK_KIND_TIMED: kindAsString = "Timed Task"; break;
	}
	return kindAsString;
}

// Returns 1 if first is more than second, -1 if less, 0 if equal
int Task::checkDate(date first, date second)
{
	if(first.year>second.year)
		return COMPARE_MORETHAN;
	if(first.year<second.year)
		return COMPARE_LESSTHAN;
	if(first.month>second.month)
		return COMPARE_MORETHAN;
	if(first.month<second.month)
		return COMPARE_LESSTHAN;
	if(first.day>second.day)
		return COMPARE_MORETHAN;
	if(first.day<second.day)
		return COMPARE_LESSTHAN;

	return COMPARE_EQUALTO; 
}

// Returns 1 if first is more than second, -1 if less, 0 if equal
int Task::checkTime(time_s first, time_s second)
{
	if(first.hr>second.hr)
		return COMPARE_MORETHAN;
	if(first.hr<second.hr)
		return COMPARE_LESSTHAN;
	if(first.min>second.min)
		return COMPARE_MORETHAN;
	if(first.min<second.min)
		return COMPARE_LESSTHAN;

	return COMPARE_EQUALTO;
}

char Task::returnStatus()
{
	return status;
}

// Returns false if newStatus is invalid
bool Task::changeStatus(char newStatus)
{
	newStatus = tolower(newStatus);

	if (newStatus == TASK_STATUS_DONE)
		status = TASK_STATUS_DONE;
	else if(newStatus == TASK_STATUS_NOTDONE)
		status = TASK_STATUS_NOTDONE;
	else if(newStatus == TASK_STATUS_APPROACHING)
		status = TASK_STATUS_APPROACHING;
	else if(newStatus == TASK_STATUS_MISSED)
		status = TASK_STATUS_MISSED;
	else
		return false;

	return true;
}

// Returns false if newDate is invalid
bool Task::assignDateValue(date newDate, char dateOption)
{
	bool negativeDate = newDate.day<1||newDate.month<1||newDate.year<1;
	if(negativeDate)
		return false;

	switch(newDate.month)
	{
	case 1: if(newDate.day<=31) break; 
	case 2: if(newDate.day<=29) break;
	case 3: if(newDate.day<=31) break;
	case 4: if(newDate.day<=30) break;
	case 5: if(newDate.day<=31) break;
	case 6: if(newDate.day<=30) break;
	case 7: if(newDate.day<=31) break;
	case 8: if(newDate.day<=31) break;
	case 9: if(newDate.day<=30) break;
	case 10: if(newDate.day<=31) break;
	case 11: if(newDate.day<=30) break;
	case 12: if(newDate.day<=31) break;
	default: return false;
	}

	if(!checkLeapYear(newDate.year)&&newDate.month==2&&newDate.day==29) {
		return false;
	}

	if(dateOption==TASK_DATETIME_START)
		startDate = newDate;
	else
		endDate = newDate;

	return true;
}

// Returns false if newTime is invalid
bool Task::assignTimeValue(time_s newTime, char timeOption)
{
	if(newTime.hr>23||newTime.hr<0||newTime.min>59||newTime.min<0)
		return false;

	if(timeOption== TASK_DATETIME_START)
		startTime = newTime;
	else
		endTime = newTime;

	return true;
}

// Returns false if newKind is invalid
bool Task::assignKind(char newKind)
{
	newKind = tolower(newKind);
	bool validKind = (newKind == TASK_KIND_TIMED)||(newKind == TASK_KIND_DEADLINE)||(newKind == TASK_KIND_FLOATING);

	if(validKind)
	{
		kind = newKind;
		return true;
	}
	else
		return false;
}

void Task::assignDetails(string description)
{
	details = description;
}

void Task::assignIDNumber(int number)
{
	taskID=number;
}

char Task::returnKind()
{
	return kind;
}

int Task::getTaskID()
{
	return taskID;
}

// Returns start or end date depending on dateOption, 0 date if invalid
date Task::returnDate(char dateOption)
{
	date d;
	d.day = d.month = d.year = 0;

	if(dateOption == TASK_DATETIME_START)
		return startDate;
	else if(dateOption == TASK_DATETIME_END)
		return endDate;
	else
		return d;
}

// Returns start or end time depending on timeOption, 0 time if invalid
time_s Task::returnTime(char timeOption)
{
	time_s t;
	t.hr = t.min = 0;

	if(timeOption == TASK_DATETIME_START)
		return startTime;
	else if(timeOption == TASK_DATETIME_END)
		return endTime;
	else
		return t;
}

// Returns true if year is a leap year, false otherwise
bool Task::checkLeapYear(int year)
{
	if (year%4 != 0)
	{
		return false;
	}
	else
	{
		return true;
	}
}
	// End of segment: DaOrganiser\task.cpp





	/**
	 * origin: DaOrganiser\taskmanager.cpp
	 */

TaskManager::TaskManager()
{
	ID=0;
}

TaskManager::~TaskManager()
{
}

char TaskManager::initStatus(Task newTask)
{
	time_t now = time(0);
	tm *ltm = localtime(&now);
	date temp, edate;
	temp.day = ltm->tm_mday;
	temp.month = 1 + ltm->tm_mon;
	temp.year = (1900 + ltm->tm_year)%100;

	time_s tempTime, etime;
	tempTime.hr = ltm->tm_hour;
	tempTime.min = ltm->tm_min;

	if(newTask.returnKind() == 'd' || newTask.returnKind() == 't')
	{
		edate = newTask.returnDate('e');
		etime = newTask.returnTime('e');
		if(newTask.checkDate(edate, temp) == 0)
			if(newTask.checkTime(etime, tempTime) == 1)
				return 'm';
			else
				return 'a';
	}
	return 'n';
}

bool TaskManager::createTask(vector<string>splitString,vector<Task> &TaskStorage) 
{ 
	Task newTask; 
	bool dateFlagStart, dateFlagEnd, timeFlagStart, timeFlagEnd; 
	string singleWord; 

	dateFlagStart = dateFlagEnd = timeFlagStart = timeFlagEnd = false;

	for(unsigned int i=0;i<splitString.size();i++) 
	{ 
		if(splitString[i]=="-startdate") { 
			int dateValue=stringToInt(splitString[i+1]);
			dateFlagStart = assignDate(newTask,dateValue,'s');
			if (dateFlagStart==false)
				return false;
		} 
		else if(splitString[i]=="-enddate") { 
			int dateValue=stringToInt(splitString[i+1]);
			dateFlagEnd = assignDate(newTask,dateValue,'e');	
			if (dateFlagEnd==false)
				return false;
		}
		else if(splitString[i]=="-starttime") 
		{ 
			if (!checkTime(splitString[i+1])) {
				return false;
			}
			int timeValue=stringToInt(splitString[i+1]);
			timeFlagStart = assignTime (newTask,timeValue,'s');
			if (timeFlagStart==false)
				return false;
		} 
		else if(splitString[i]=="-endtime") 
		{ 
			if (!checkTime(splitString[i+1])) {
				return false;
			}
			int timeValue=stringToInt(splitString[i+1]);
			timeFlagEnd = assignTime (newTask,timeValue,'e');
			if (timeFlagEnd==false)
				return false;
		} 
		else if(splitString[i]=="-details") 
		{ 
			string details=extractDetails(i,splitString);
			newTask.assignDetails(details); 
		} 
		else if(splitString[i]=="-status") 
		{ 
			newTask.changeStatus(splitString[i+1][0]); 
			if(!newTask.changeStatus(splitString[i+1][0])) 
				return false; 
		} 
	}

	if (dateFlagStart==0 && timeFlagStart==1) {
		assignSystemDate(newTask,'s');
	}
	else if (dateFlagStart==0 && timeFlagStart==0) {
		assignSystemDate(newTask,'s');
		assignSystemTime(newTask,'s');
	}

	if (dateFlagStart==1 && dateFlagEnd==1 && timeFlagStart==1 &&timeFlagEnd==1) {
		newTask.assignKind('t');
		if (!checkDateTimeLogic(newTask,'t')) {
			return false;
		}
	}
	else if (dateFlagEnd==1 && timeFlagEnd==1) {
		newTask.assignKind('d');
		if (!checkDateTimeLogic(newTask,'d')) {
			return false;
		}
	}
	else {
		newTask.assignKind('f');
	}

	// Status assignment occurs here
	char statusAssign = initStatus(newTask);
	newTask.changeStatus(statusAssign);

	updateIDNumber();
	newTask.assignIDNumber(ID);
	insertTaskExecuted(ID,"create");

	TaskStorage.push_back(newTask);
	recordRedoCommand.clear();
	return true; 
} 

void TaskManager::readTask(vector<Task> &TaskStorage)
{
	if(TaskStorage.empty()) 
		cout<<"No Tasks exist"<<endl;
	else {
		for(unsigned int i=0;i<TaskStorage.size();i++)
		{
			cout<<"--------------Task"<<i+1<<"--------------"<<endl;;
			//TaskStorage[i].displayDetail();
			cout<<endl;
		}
	}
}

bool TaskManager::updateTask(vector<string> splitString,vector<Task> &TaskStorage)
{       
	int taskID;
	bool dateFlagStart, dateFlagEnd, timeFlagStart, timeFlagEnd, statusFlag;
	string singleWord, text;

	dateFlagStart = dateFlagEnd = timeFlagStart = timeFlagEnd = statusFlag = 0;

	taskID=searchIDToBeUpdated(splitString);
	//------------------------------------------
	//please change and refactor the code below 
	if (taskID>=splitString.size())
		return false;
	// Converts the string to number
	int number = stringToInt(splitString[taskID].c_str()); 
	int pos;
	try {
		pos=findIDPos(number,TaskStorage);
		insertTaskExecuted(number,"update");
		recordRedoCommand.clear();

		Task newTask = TaskStorage[pos];
		//store the task before it is updated
		storeTask(newTask);

		for(unsigned int i=0;i<splitString.size();i++)
		{
			if(splitString[i]=="-startdate") { 
				int dateValue=stringToInt(splitString[i+1]);
				dateFlagStart = assignDate(TaskStorage[pos],dateValue,'s');
				if (dateFlagStart==false) {
					TaskStorage[pos] = newTask;
					return false;
				}
			} 
			else if(splitString[i]=="-enddate")
			{
				int dateValue=stringToInt(splitString[i+1]);
				dateFlagEnd = assignDate(TaskStorage[pos],dateValue,'e');	
				if (dateFlagEnd==false) {
					TaskStorage[pos] = newTask;
					return false;
				}
			}
			else if(splitString[i]=="-starttime")
			{ 
				if (!checkTime(splitString[i+1])) {
					return false;
				}
				int timeValue=stringToInt(splitString[i+1]);
				timeFlagStart = assignTime (TaskStorage[pos],timeValue,'s');
				if (timeFlagStart==false) {
					TaskStorage[pos] = newTask;
					return false;
				}
			} 
			else if(splitString[i]=="-endtime")
			{ 
				if (!checkTime(splitString[i+1])) {
					return false;
				}
				int timeValue=stringToInt(splitString[i+1]);
				timeFlagEnd = assignTime (TaskStorage[pos],timeValue,'e');
				if (timeFlagEnd==false) {
					TaskStorage[pos] = newTask;
					return false;
				}
			} 
			else if(splitString[i]=="-details")
			{ 
				string details=extractDetails(i,splitString);
				TaskStorage[pos].assignDetails(details); 
			} 				
			else if(splitString[i]=="-status")
			{
				TaskStorage[pos].changeStatus(splitString[i+1][0]);
				if(!TaskStorage[pos].changeStatus(splitString[i+1][0]))
				{
					TaskStorage[pos] = newTask;
					return false;
				}
				statusFlag = 1;
			}

			if (dateFlagStart==0 && timeFlagStart==1) {
				assignSystemDate(newTask,'s');
			}
			else if (dateFlagStart==0 && timeFlagStart==0) {
				assignSystemDate(newTask,'s');
				assignSystemTime(newTask,'s');
			}

			if (dateFlagStart==1 && dateFlagEnd==1 && timeFlagStart==1 &&timeFlagEnd==1) {
				newTask.assignKind('t');
				if (!checkDateTimeLogic(newTask,'t')) {
					return false;
				}
			}
			else if (dateFlagEnd==1 && timeFlagEnd==1) {
				newTask.assignKind('d');
				if (!checkDateTimeLogic(newTask,'d')) {
					return false;
				}
			}
			else {
				newTask.assignKind('f');
			}

			if(!statusFlag)
			{
				char statusAssign = initStatus(newTask);
				newTask.changeStatus(statusAssign);
			}
		}
		return true;
	} catch (const char* msg) {
		throw msg;
	}
	return false;
}


bool TaskManager::deleteTask(vector<string> splitString, vector<Task> &TaskStorage)
{
	int deleteTaskID = stringToInt(splitString[1].c_str()); 

	int delPos=findIDPos(deleteTaskID,TaskStorage);

	storeTask(TaskStorage.at(delPos));
	insertTaskExecuted(TaskStorage.at(delPos).getTaskID(),"delete");
	TaskStorage.erase(TaskStorage.begin()+delPos);

	return true;
}

	// End of segment: DaOrganiser\taskmanager.cpp





	/**
	 * origin: DaOrganiser\taskmanager.cpp
	 */

int TaskManager::stringToInt(string toConvert) {
	int value = atoi(toConvert.c_str());
	return value;
}

bool TaskManager::assignDate(Task &newTask,int dateValue,char dateOption) {
	date newDate;
	if (!checkDateValue(dateValue)) {
		return false;
	}

	if (!getDayMonthYear(dateValue,newDate)) {
		return false;
	}

	if(!newTask.assignDateValue(newDate, dateOption)) { 
		return false; 
	}
	return true;
}

bool TaskManager::getDayMonthYear(int dateValue, date &newDate) {
	newDate.year = dateValue%100; 
	dateValue/=100; 
	newDate.month = dateValue%100; 
	dateValue/=100; 
	newDate.day = dateValue%100;
	dateValue/=100;

	if (dateValue>0) {
		return false;
	}
	return true;
}

bool TaskManager::checkDateValue(int dateValue) {
	if (dateValue/10000 > 1)
		return true;
	return false;
}

bool TaskManager::assignTime(Task &newTask,int timeValue,char timeOption) {
	time_s newTime;

	if (!getHourMin(timeValue,newTime)) {
		return false;
	}

	if(!newTask.assignTimeValue(newTime, timeOption)) { 
		return false; 
	}
	return true;
}

bool TaskManager::getHourMin(int timeValue, time_s &newTime) {
	newTime.min = timeValue%100; 
	timeValue/=100; 
	newTime.hr = timeValue%100; 
	timeValue/=100;

	if (timeValue)
		return false;
	return true;
}
bool TaskManager::checkTime(string toCheckTime) {
	int size=toCheckTime.size();
	if (size!=4)
		return false;
	else {
		for (int i=0;i<4;i++) {
			if (toCheckTime[i]<'0'||toCheckTime[i]>'9')
				return false;
		}
	}
	return true;
}

string TaskManager::extractDetails(int i, vector<string> splitString) {
	string text = ""; 
	int j;
	j=i+1; 

	// Checks if the first letter of the next string is a '-' 
	// if yes, the loop breaks else the words are assigned to the variable details 

	while(splitString[j][0]!='-') 
	{ 
		text += splitString[j]; 
		text += " "; 
		j++; 
		if(j==splitString.size()) 
			break; 
		if(splitString[j][0]=='-') 
			break; 
	} 

	// Deleting the last extra space in the string  
	text = text.substr(0, text.size()-1);
	return text;
}

void TaskManager::assignSystemTime(Task &newTask, char timeOption) {
	time_t now = time(0);
	tm *ltm = localtime(&now);

	time_s temp;
	temp.hr = ltm->tm_hour;
	temp.min = ltm->tm_min;

	newTask.assignTimeValue(temp,timeOption);
}

void TaskManager::assignSystemDate(Task &newTask, char dateOption) {
	time_t now = time(0);
	tm *ltm = localtime(&now);

	date temp;
	temp.day = ltm->tm_mday;
	temp.month = 1 + ltm->tm_mon;
	temp.year = (1900 + ltm->tm_year)%100;

	newTask.assignDateValue(temp,dateOption);
}

	// End of segment: DaOrganiser\taskmanager.cpp





	/**
	 * origin: DaOrganiser\taskmanager.cpp
	 */

int TaskManager::searchIDToBeUpdated(vector<string> splitString) {
	int ID=0;
	while(splitString[ID]!="-update")
	{
		ID++;
	}
	ID++;
	return ID;
}
	// End of segment: DaOrganiser\taskmanager.cpp





